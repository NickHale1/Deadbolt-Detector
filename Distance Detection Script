#!/usr/bin/python

# The purpose of this python script is to report the status of the lock to the database
# When the status is known, the emergency lock will then update accordingly: locking 2 minutes after door is unlocked or unlocking when door is locked

# Import required Python libraries
import time
import RPi.GPIO as GPIO
import requests
from gpiozero import AngularServo

servo = AngularServo(25, min_pulse_width=0.0006, max_pulse_width=0.0023)

timeUnlocked = 0.0

GPIO.setmode(GPIO.BCM)

#GPIO to use on Pi
TRIG = 23
ECHO = 24

# Lock represents the lock
# Flag represents the status of the emergency lock
locked = True
flag = False

# Set pins as output and input
GPIO.setup(TRIG,GPIO.OUT)  # Trigger
GPIO.setup(ECHO,GPIO.IN)      # Echo

GPIO.setwarnings(False)

print ("Ultrasonic Measurement")

try:
        while True:

                GPIO.output(TRIG, False)
                print ("Waiting For Sensor To Settle")
                time.sleep(2)

                GPIO.output(TRIG, True)
                time.sleep(0.00001)
                GPIO.output(TRIG, False)

                while GPIO.input(ECHO)==0:
                        pulse_start = time.time()

                while GPIO.input(ECHO)==1:
                        pulse_stop = time.time()

# Calculate pulse length

 		pulse_duration = (pulse_stop - pulse_start)

                distance = (pulse_duration * 17150)

                distance = round(distance, 2)

# Check to see if door is unlocked. False = Unlocked.
                if(distance > 50 and locked == False):
                        url = 'https://deadbolt-detector-default-rtdb.firebasei>
                        response = requests.put(url, json = {'status': True})
                        #Retract lock
                        print("Retracting lock")

                        servo.angle = 45
                        time.sleep(2)

			print ("Updated Status: Locked")
                        locked = True
                        flag = False
                        url = 'https://deadbolt-detector-default-rtdb.firebasei>
                        response = requests.put(url, json = {'status': False})

                print ("Distance :",distance,"cm")

                if(distance <= 50 and locked):
                        url = 'https://deadbolt-detector-default-rtdb.firebasei>
                        response = requests.put(url, json = {'status': False})
                        print ("Updated Status: Unlocked")
                        locked = False
                        timeUnlocked = time.time()

		if(locked == False and flag == False and time.time() - timeUnlo>
                        url = 'https://deadbolt-detector-default-rtdb.firebasei>
                        response = requests.put(url, json = {'status': True})
                        # Engage lock
                        print ("Engaging lock")
                        flag = True
                        servo.angle = -45
                        time.sleep(2)

except KeyboardInterrupt:
        print("Cleaning up!")
        GPIO.cleanup()
